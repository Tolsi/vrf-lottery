package main

import (
	"encoding/json"
	"flag"
	"fmt"
	. "github.com/Tolsi/vrf-lottery/tools"
	"io/ioutil"
	"net/http"
	"os"
)

type Transaction struct {
	Type      int8   `json:"type"`
	Sender    string `json:"sender"`
	Recipient string `json:"recipient"`
	Timestamp int64  `json:"timestamp"`
	AssetId   string `json:"assetId"`
}

func GetAddressRecipients(address string, assetId string, fromTs int64) ([]string, error) {
	// Generated by curl-to-Go: https://mholt.github.io/curl-to-go
	req, err := http.NewRequest("GET", fmt.Sprintf("https://nodes.wavesnodes.com/transactions/address/%s/limit/1000", address), nil)
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/json")
	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()
	var txs [][]Transaction
	body, err := ioutil.ReadAll(resp.Body)
	err = json.Unmarshal(body, &txs)
	if err != nil {
		return nil, err
	}
	var recipients = make([]string, 0)
	for _, tx := range txs[0] {
		if tx.Type == 4 && tx.Sender == address && tx.AssetId == assetId && tx.Timestamp > fromTs {
			recipients = append(recipients, tx.Recipient)
		}
	}
	return recipients, nil
}

func main() {
	//region Read params

	senderAddress := *flag.String("senderAddress", "", "Sender address for filter the outcome transactions")
	tokenId := *flag.String("tokenId", "", "Token id for filter the outcome transactions")

	if senderAddress == "" {
		flag.Usage()
		os.Exit(1)
	}

	if tokenId == "" {
		flag.Usage()
		os.Exit(1)
	}

	//endregion

	//region Load recipients of sended txs

	fromTs := flag.Int64("fromTs", 0, "Filter transaction from timestamp in millis")
	recipients, err := GetAddressRecipients(senderAddress, tokenId, *fromTs)
	PrintErrorAndExit(err)
	res, _ := json.Marshal(recipients)

	//endregion

	//region Result output

	fmt.Printf("%s\n", res)

	//endregion
}
