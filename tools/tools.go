package tools

import (
	"encoding/json"
	"errors"
	"fmt"
	"io/ioutil"
	"math/big"
	"math/rand"
	"net/http"
	"os"
)

func PrintErrorAndExit(err error) {
	if err != nil {
		println(err.Error())
		os.Exit(1)
	}
}

func GetBlockSignature(blockNumber uint) (string, error) {
	// Generated by curl-to-Go: https://mholt.github.io/curl-to-go
	req, err := http.NewRequest("GET", fmt.Sprintf("https://nodes.wavesnodes.com/blocks/headers/at/%d", blockNumber), nil)
	if err != nil {
		return "", err
	}
	req.Header.Set("Accept", "application/json")

	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		return "", err
	}
	defer resp.Body.Close()
	body, err := ioutil.ReadAll(resp.Body)
	data := make(map[string]interface{})
	err = json.Unmarshal(body, &data)
	if err != nil {
		return "", err
	}
	if signature, ok := data["signature"].(string); ok {
		return signature, nil
	}
	return "", errors.New("wrong type")
}

func contains(s []int, e int) bool {
	for _, a := range s {
		if a == e {
			return true
		}
	}
	return false
}

func PickUniquePseudorandomParticipants(seed []byte, pickN int, participants []string) []string {
	winners := make([]string, len(participants))
	seedNumber := new(big.Int)
	seedNumber.SetBytes(seed)
	s := rand.NewSource(seedNumber.Int64())
	r := rand.New(s)
	copy(winners, participants)
	r.Shuffle(len(winners), func(i, j int) {
		winners[i], winners[j] = winners[j], winners[i]
	})
	return winners[0:pickN]
}
