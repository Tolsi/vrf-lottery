package main

import (
	"encoding/json"
	"flag"
	"fmt"
	. "github.com/Tolsi/vrf-lottery/tools"
	"io/ioutil"
	"net/http"
	"os"
	"time"
)

type Header struct {
	Height    int64 `json:"height"`
	Timestamp int64 `json:"timestamp"`
}

func GetLastHeader() (*Header, error) {
	// Generated by curl-to-Go: https://mholt.github.io/curl-to-go
	req, err := http.NewRequest("GET", "https://nodes.wavesnodes.com/blocks/headers/last", nil)
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/json")
	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()
	var header Header
	body, err := ioutil.ReadAll(resp.Body)
	err = json.Unmarshal(body, &header)
	if err != nil {
		return nil, err
	}
	return &header, nil
}

func GetHeaderAt(height int64) (*Header, error) {
	// Generated by curl-to-Go: https://mholt.github.io/curl-to-go
	req, err := http.NewRequest("GET", fmt.Sprintf("https://nodes.wavesnodes.com/blocks/headers/at/%d", height), nil)
	if err != nil {
		return nil, err
	}
	req.Header.Set("Accept", "application/json")
	resp, err := http.DefaultClient.Do(req)
	if err != nil {
		return nil, err
	}
	defer resp.Body.Close()
	var header Header
	body, err := ioutil.ReadAll(resp.Body)
	err = json.Unmarshal(body, &header)
	if err != nil {
		return nil, err
	}
	return &header, nil
}

func main() {
	atDatetimeString := flag.String("at", "", "Calculate height at datetime")
	blockHeight := flag.Int64("block", 0, "Calculate datetime by height")

	flag.Parse()

	if *atDatetimeString == "" && *blockHeight == 0 {
		flag.Usage()
		os.Exit(1)
	}

	lastHeader, err := GetLastHeader()
	PrintErrorAndExit(err)

	if *atDatetimeString != "" {
		atDatetime, err := time.Parse(time.RFC3339, *atDatetimeString)
		PrintErrorAndExit(err)
		futureTsMs := atDatetime.UnixNano() / int64(time.Millisecond)
		delta := (futureTsMs - lastHeader.Timestamp) / 60000
		predictedBlockHeight := lastHeader.Height + delta
		fmt.Printf("%d\n", predictedBlockHeight)
	} else {
		diff := (*blockHeight - lastHeader.Height) * 60000
		if diff < 0 {
			header, err := GetHeaderAt(*blockHeight)
			PrintErrorAndExit(err)
			fmt.Printf("%s\n", time.Unix(header.Timestamp/1000, 0).Format(time.RFC3339))
		} else {
			predictedBlockTime := lastHeader.Timestamp + diff
			fmt.Printf("%s\n", time.Unix(predictedBlockTime/1000, 0).Format(time.RFC3339))
		}
	}
}
